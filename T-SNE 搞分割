import os

import numpy as np
import matplotlib.pyplot as plt
from sklearn import datasets
from sklearn.manifold import TSNE
import cv2
import torchvision.transforms.functional as ff
# 加载数据
from torch.utils.data import Dataset

import matplotlib.patches as mpatches

def get_data():
    """
    :return: 数据集、标签、样本数量、特征数量
    """
    # digits = datasets.load_digits(n_class=10)
    # data = digits.data      # 图片特征
    # label = digits.target       # 图片标签
    # n_samples, n_features = data.shape      # 数据集的形状

    path = "D:\Anaconda\envs/01FCN\merge5"  #改地址
    files_list = os.listdir(path)
    file_path_list = [os.path.join(path, img) for img in files_list]
    file_path_list.sort()
    list_shape = np.array(file_path_list).shape
    newdata = []
    for sample in file_path_list:
        data = cv2.imread(sample)
        data = cv2.resize(data,(64,64))
        data = cv2.cvtColor(data, cv2.COLOR_RGB2GRAY)
        data = np.array(data)
        data = data.reshape(-1)
        newdata.append(data)

    path1 = "D:\Anaconda\envs/01FCN\merge6" #改地址
    files_list1 = os.listdir(path1)
    file_path_list1 = [os.path.join(path1, img1) for img1 in files_list1]
    file_path_list1.sort()
    for sample1 in file_path_list1:
        data1 = cv2.imread(sample1)
        data1 = cv2.resize(data1,(64,64))
        data1 = cv2.cvtColor(data1, cv2.COLOR_RGB2GRAY)
        data1 = np.array(data1)

        data1 = data1.reshape(-1)
        newdata.append(data1)

    newdata = np.array(newdata)

    #===专用数据集1===#
    # label = [1] * 400   #改标签
    # for jj in range(0,400):
    #     label.append(0)
    # ===专用数据集===#

    # ===移动数据集2===#
    # label = [1] * 502
    # for jj in range(0,502):
    #     label.append(0)
    # ===移动数据集===#

    # ===移动数据集3===#
    label = [1] * 200
    for jj in range(0, 200):
        label.append(0)
    # ===移动数据集===#

    n_samples, n_features =  1004 , 4096
    return newdata, label, n_samples, n_features

#data : {ndarray:(1797,64)}
#label :{ndarray:(1797,)}
#n_samples:{int} 1797 （ 张 ）
#n_features:{int} 64  （ 长*宽 ）

# 对样本进行预处理并画图
def plot_embedding(data, label, title):
    """
    :param data:数据集
    :param label:样本标签
    :param title:图像标题
    :return:图像
    """
    x_min, x_max = np.min(data, 0), np.max(data, 0)
    data = (data - x_min) / (x_max - x_min)     # 对数据进行归一化处理
    fig = plt.figure()      # 创建图形实例
    ax = plt.subplot(111)       # 创建子图
    # 遍历所有样本

    x1 = []
    x2 = []
    x3 = []
    x4 = []
    color = ['red', 'green']

    for i in range(data.shape[0]):
        # 在图中为每个数据点画出标签

        if label[i]==0:
            x1.append([data[i, 0]])
            x2.append([data[i, 1]])
        else:
            x3.append([data[i, 0]])
            x4.append([data[i, 1]])
    plt.scatter(x1, x2, s=18, c=color[0],  marker='v')
    plt.scatter(x3, x4, s=18, c=color[1],  marker='o')

    plt.xticks()        # 指定坐标的刻度
    plt.yticks()

    plt.legend(["background", "tougue"], loc='upper left')

    #plt.title(title, fontsize=14)
    #ax.legend(handles=patches, marker=["v","o"],ncol=4)  # 生成legend

    #doc = plt.scatter(x, y2, color='green', label="绘点标签")  # 绘点图
    # 返回值
    return fig

# 主函数，执行t-SNE降维
def main():
    data, label, n_samples, n_features = get_data()
    data = np.array(data)# 调用函数，获取数据集信息
    print('Starting compute t-SNE Embedding...')
    ts = TSNE(n_components=2, init='pca', random_state=0)
    # t-SNE降维
    reslut = ts.fit_transform(data)
    # 调用函数，绘制图像
    fig = plot_embedding(reslut, label, 't-SNE Embedding of digits')
    # 显示图像
    plt.show()


# 主函数
if __name__ == '__main__':
    main()

